{"version":3,"file":"webgl-math.min.js","sources":["../src/vector.js","../src/matrix.js","../src/transform.js","../src/camera.js","../index.js"],"sourcesContent":["const negative = vec => vec.map(value => -value);\n\nconst reverse = vec => Float32Array.from(vec).reverse();\n\nconst length = vec => Math.sqrt(vec.reduce((acc, value) => acc + Math.pow(value, 2), 0.0));\n\nconst scale = (vec, number) => vec.map(val => val * number);\n\nconst normalize = vec => scale(vec, 1 / (len => (len > 0 ? len : 1))(length(vec)));\n\nconst add = (vecA, vecB) => vecA.map((value, index) => value + vecB[index]);\n\nconst subtract = (vecA, vecB) => add(vecA, negative(vecB));\n\nconst multiply = (vecA, vecB) => vecA.map((value, index) => value * vecB[index]); // component-wise\n\nconst dot = (vecA, vecB) => vecA.reduce((acc, val, index) => acc + val * vecB[index], 0.0);\n\nconst cross = (vecA, vecB) =>\n  Float32Array.of(\n    vecA[1] * vecB[2] - vecA[2] * vecB[1],\n    vecA[2] * vecB[0] - vecA[0] * vecB[2],\n    vecA[0] * vecB[1] - vecA[1] * vecB[0]\n  );\n\nconst fromAngle = angle => Float32Array.of(Math.cos(angle), Math.sin(angle));\n\nconst toAngle = vec => Math.atan2(vec[1], vec[0]);\n\nconst rotate = (vec, angle) => fromAngle(toAngle(vec) + angle);\n\nconst swizzle = (vec, swizz) => Float32Array.from(swizz.map(index => vec[Math.abs(index)] * Math.sign(1 / index)));\n\nmodule.exports = {\n  negative,\n  reverse,\n  length,\n  scale,\n  normalize,\n  add,\n  subtract,\n  multiply,\n  dot,\n  cross,\n  fromAngle,\n  toAngle,\n  rotate,\n  swizzle,\n};\n","const Vector = require('./vector');\n\n// Only Square Matrix\nconst slice = (matA, length) =>\n  Array.from(new Float32Array(length), (_, index) => matA.slice(index * length, (index + 1) * length));\n\nconst flat = slicedMat =>\n  Float32Array.from(slicedMat.reduce((acc, value) => Float32Array.of(...acc, ...Float32Array.from(value))));\n\nconst idendity = rowCount =>\n  new Float32Array(rowCount * rowCount).map((_, index) => (index % (rowCount + 1) === 0 ? 1 : 0));\n\nconst determinant = matA => {\n  if (matA.length === 1) return matA[0];\n  else {\n    const row = Math.sqrt(matA.length);\n\n    return matA.slice(0, row).reduce((acc, value, index) => {\n      const tempMat = matA.filter((_, j) => j >= row && (j - index) % row !== 0);\n\n      const sign = index % 2 == 0 ? 1 : -1;\n\n      return acc + sign * value * determinant(tempMat);\n    }, 0.0);\n  }\n};\n\nconst transpose = matA => {\n  const row = Math.sqrt(matA.length);\n\n  return Float32Array.from(\n    new Float32Array(matA.length),\n    (_, index) => (index % row) * row + Math.floor(index / row)\n  ).map(value => matA[value]);\n};\n\nconst negative = matA => multiplyScalar(matA, -1);\n\nconst multiplyScalar = (matA, number) => matA.map(value => value * number);\n\nconst multiplyVector = (matA, vecA) =>\n  Float32Array.from(slice(transpose(matA), vecA.length), row =>\n    row.reduce((acc, value, index) => acc + value * vecA[index], 0.0)\n  );\n\nconst add = (matA, matB) => matA.map((value, index) => value + matB[index]);\n\nconst subtract = (matA, matB) => add(matA, negative(matB));\n\nconst multiplyCompWise = (matA, matB) => matA.map((value, index) => value * matB[index]); // component-wise\n\nconst _multiply = (matA, matB) =>\n  new Float32Array(matA.length * matA.length).map((_, index) =>\n    Vector.dot(matA[index % matA.length], matB[Math.floor(index / matA.length)])\n  );\n\nconst multiply = (matA, matB) =>\n  _multiply(slice(transpose(matA), Math.sqrt(matA.length)), slice(matB, Math.sqrt(matB.length)));\n\nmodule.exports = {\n  slice,\n  flat,\n  idendity,\n  determinant,\n  transpose,\n  negative,\n  multiplyScalar,\n  multiplyVector,\n  add,\n  subtract,\n  multiplyCompWise,\n  multiply,\n};\n","const Vector = require('./vector');\nconst Matrix = require('./matrix');\n\nconst _rotateHelperMatrix = (angle, _axis) => {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  const axis = Vector.normalize(_axis);\n  const t = Vector.scale(axis, 1 - cos);\n\n  const col1 = Float32Array.of(cos + t[0] * axis[0], t[0] * axis[1] + sin * axis[2], t[0] * axis[2] - sin * axis[1]);\n\n  const col2 = Float32Array.of(t[1] * axis[0] - sin * axis[2], cos + t[1] * axis[1], t[1] * axis[2] + sin * axis[0]);\n\n  const col3 = Float32Array.of(t[2] * axis[0] + sin * axis[1], t[2] * axis[1] - sin * axis[0], cos + t[2] * axis[2]);\n\n  return [col1, col2, col3];\n};\n\nconst _translate = (matA, vecA) =>\n  Matrix.flat(\n    Matrix.slice(matA, vecA.length).map((value, index, arr) =>\n      index !== arr.length - 1\n        ? value\n        : arr.reduce(\n            (acc, value, index) => Vector.add(acc, Vector.scale(value, vecA[index])),\n            new Float32Array(vecA.length).fill(0.0)\n          )\n    )\n  );\n\nconst _rotate = (matA, matR) =>\n  Matrix.flat(\n    Matrix.slice(matA, Math.sqrt(matA.length)).map((value, i, arr) =>\n      i === arr.length - 1\n        ? value\n        : arr\n            .slice(0, 3)\n            .reduce((acc, value, j) => Vector.add(acc, Vector.scale(value, matR[i][j])), new Float32Array(4).fill(0.0))\n    )\n  );\n\nconst _scale = (matA, vecA) =>\n  Matrix.flat(Matrix.slice(matA, vecA.length).map((row, index) => Vector.scale(row, vecA[index])));\n\nconst scale = (matA, vecA) => _scale(matA, Float32Array.of(...vecA, 1.0));\nconst translate = (matA, vecA) => _translate(matA, Float32Array.of(...vecA, 1.0));\nconst rotate = (matA, angle, axis) => _rotate(matA, _rotateHelperMatrix(angle, axis));\n\nmodule.exports = {\n  scale,\n  translate,\n  rotate,\n};\n","const Vector = require('./vector');\nconst Matrix = require('./matrix');\nconst Transform = require('./transform');\n\nconst perspective = (fovy, aspect, near, far) => {\n  const thf = 1 / Math.tan(fovy * 0.5);\n\n  return Float32Array.of(\n    thf / aspect, 0, 0, 0,\n    0, thf, 0, 0,\n    0, 0, (far + near) / (near - far), -1,\n    0, 0, (2 * far * near) / (near - far), 0,\n  );\n};\n\nconst ortho = (left, right, bottom, top, near, far) => Float32Array.of(\n  2 / (left - right), 0, 0, 0,\n  0, 2 / (top - bottom), 0, 0,\n  0, 0, 2 / (near - far), 0,\n  (right + left) / (left - right),\n  (top + bottom) / (bottom - top),\n  (far + near) / (near - far),\n  1,\n);\n\nconst lookAt = (eye, target, _up) => {\n  const forward = Vector.normalize(Vector.subtract(eye, target));\n  const right = Vector.cross(Vector.normalize(_up), forward);\n  const up = Vector.cross(forward, right);\n\n  return Matrix.multiply(\n    Matrix.transpose(\n      Matrix.flat([\n        Float32Array.of(...right, 0.0),\n        Float32Array.of(...up, 0.0),\n        Float32Array.of(...forward, 0.0),\n        Float32Array.of(0, 0, 0, 1),\n      ])\n    ),\n    Transform.translate(Matrix.idendity(4), Matrix.negative(eye))\n  );\n};\n\nmodule.exports = {\n  perspective,\n  ortho,\n  lookAt,\n};","const pjson = require('./package.json');\n\nmodule.exports.VERSION = pjson.version;\nmodule.exports.Vector = require(\"./src/vector\");\nmodule.exports.Matrix = require(\"./src/matrix\");\nmodule.exports.Camera = require('./src/camera');\nmodule.exports.Transform = require('./src/transform');\n"],"names":["negative","vec","map","value","length","Math","sqrt","reduce","acc","pow","scale","number","val","add","vecA","vecB","index","fromAngle","angle","Float32Array","of","cos","sin","toAngle","atan2","reverse","from","normalize","len","subtract","multiply","dot","cross","rotate","swizzle","swizz","abs","sign","slice","matA","Array","_","determinant","row","tempMat","filter","j","transpose","floor","multiplyScalar","matB","flat","slicedMat","idendity","rowCount","multiplyVector","multiplyCompWise","Vector","_multiply","Matrix","_scale","translate","arr","fill","_translate","axis","matR","i","_rotate","_axis","t","_rotateHelperMatrix","perspective","fovy","aspect","near","far","thf","tan","ortho","left","right","bottom","top","lookAt","eye","target","_up","forward","up","Transform","version","require$$0","require$$1","require$$2","require$$3"],"mappings":"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"}